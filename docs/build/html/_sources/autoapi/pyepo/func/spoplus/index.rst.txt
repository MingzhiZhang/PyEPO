:mod:`pyepo.func.spoplus`
=========================

.. py:module:: pyepo.func.spoplus

.. autoapi-nested-parse::

   SPO+ Loss function



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pyepo.func.spoplus.SPOPlus



Functions
~~~~~~~~~

.. autoapisummary::

   pyepo.func.spoplus.solveWithObj4Par
   pyepo.func.spoplus._solve_in_forward
   pyepo.func.spoplus._cache_in_forward
   pyepo.func.spoplus._check_sol


.. function:: solveWithObj4Par(cost, args, model_type)

   A global function to solve function in parallel processors

   :param cost: cost of objective function
   :type cost: np.ndarray
   :param args: optModel args
   :type args: dict
   :param model_type: optModel class type
   :type model_type: ABCMeta

   :returns: optimal solution (list) and objective value (float)
   :rtype: tuple


.. py:class:: SPOPlus(optmodel, processes=1, solve_ratio=1, dataset=None)

   Bases: :class:`torch.autograd.Function`

   A autograd function for SPO+ Loss, as a surrogate loss function of SPO Loss,
   which measures the decision error of optimization problem.

   For SPO/SPO+ Loss, the objective function is linear and constraints are
   known and fixed, but the cost vector need to be predicted from contextual
   data.

   The SPO+ Loss is convex with subgradient. Thus, allows us to design an
   algorithm based on stochastic gradient descent.

   .. method:: forward(ctx, pred_cost, true_cost, true_sol, true_obj)
      :staticmethod:

      Forward pass in neural network

      :param pred_cost: a batch of predicted values of the cost
      :type pred_cost: torch.tensor
      :param true_cost: a batch of true values of the cost
      :type true_cost: torch.tensor
      :param true_sol: a batch of true optimal solutions
      :type true_sol: torch.tensor
      :param true_obj: a batch of true optimal objective values
      :type true_obj: torch.tensor

      :returns: SPO+ loss
      :rtype: torch.tensor


   .. method:: backward(ctx, grad_output)
      :staticmethod:

      Backward pass in neural network



.. function:: _solve_in_forward(cp, c, w, z)

   A function to solve optimization in the forward pass


.. function:: _cache_in_forward(cp, c, w, z)

   A function to use solution pool in the forward pass


.. function:: _check_sol(c, w, z)

   A function to check solution is correct


